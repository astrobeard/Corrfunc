// # -*- mode: c -*-
/* File: gridlink_impl.h.src */
/*
  This file is a part of the Corrfunc package
  Copyright (C) 2015-- Manodeep Sinha (manodeep@gmail.com)
  License: MIT LICENSE. See LICENSE file under the top-level
  directory at https://github.com/manodeep/Corrfunc/
*/

#pragma once


#ifdef __cplusplus
extern "C" {
#endif

#include "cellarray_DOUBLE.h"
#include "cell_pair_DOUBLE.h"

#include <inttypes.h>

    extern int get_binsize_DOUBLE(const DOUBLE xmin,const DOUBLE xmax,
                                  const DOUBLE rmax,
                                  const int refine_factor,
                                  const int max_ncells,
                                  DOUBLE *xbinsize,
                                  int *nlattice,
                                  const struct config_options *options)  __attribute__((warn_unused_result));

    extern void get_max_min_DOUBLE(const int64_t ND1, const DOUBLE * restrict X1, const DOUBLE * restrict Y1, const DOUBLE * restrict Z1,
                                   DOUBLE *min_x, DOUBLE *min_y, DOUBLE *min_z, DOUBLE *max_x, DOUBLE *max_y, DOUBLE *max_z);


    extern cellarray_DOUBLE * gridlink_DOUBLE(const int64_t np,
                                              DOUBLE *x, DOUBLE *y, DOUBLE *z, weight_struct *weights,
                                              const DOUBLE xmin, const DOUBLE xmax,
                                              const DOUBLE ymin, const DOUBLE ymax,
                                              const DOUBLE zmin, const DOUBLE zmax,
                                              const DOUBLE max_x_size,
                                              const DOUBLE max_y_size,
                                              const DOUBLE max_z_size,
                                              const int xbin_refine_factor,
                                              const int ybin_refine_factor,
                                              const int zbin_refine_factor,
                                              int *nlattice_x,
                                              int *nlattice_y,
                                              int *nlattice_z,
                                              const struct config_options *options) __attribute__((warn_unused_result));

    struct cell_pair_DOUBLE * generate_cell_pairs_DOUBLE(struct cellarray_DOUBLE *lattice1,
                                                         struct cellarray_DOUBLE *lattice2,
                                                         const int64_t totncells,
                                                         int64_t *ncell_pairs,
                                                         const int xbin_refine_factor, const int ybin_refine_factor, const int zbin_refine_factor,
                                                         const int nmesh_x, const int nmesh_y, const int nmesh_z,
                                                         const DOUBLE xdiff, const DOUBLE ydiff, const DOUBLE zdiff,
                                                         const DOUBLE max_3D_sep, const DOUBLE max_2D_sep, const DOUBLE max_1D_sep,
                                                         const int enable_min_sep_opt,
                                                         const int autocorr,
                                                         const int periodic) __attribute__((warn_unused_result));

    extern int reorder_particles_back_into_original_order_DOUBLE(const int64_t np, int64_t *original_indices, DOUBLE *X, DOUBLE *Y,
                                                                 DOUBLE *Z, weight_struct *weights);

    extern void free_cellarray_DOUBLE(cellarray_DOUBLE *lattice, const int64_t totncells);

#ifdef __cplusplus
}
#endif
